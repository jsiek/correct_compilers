module LMonLiftLocals where

open import Agda.Builtin.Unit
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Bool using (if_then_else_)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§_; _‚â§·µá_; _‚à∏_; _+_; s‚â§s; _‚äî_)
open import Data.Nat.Properties
open import Data.Product
open import Data.Sum
open import Data.Integer using (‚Ñ§; -_; _-_; 0‚Ñ§; 1‚Ñ§; -1‚Ñ§)
open import Data.List
open import Data.List.Properties using (++-assoc; length-replicate; ++-identity ≥; length-++)
open import Data.Maybe
open import Relation.Binary.PropositionalEquality
   using (_‚â°_; refl; trans; sym; cong; cong-app)
open import Agda.Builtin.Bool renaming (Bool to ùîπ)
open import Relation.Nullary.Negation.Core using (¬¨_; contradiction)
open import Function.Base using (case_of_; case_returning_of_)

open import Utilities
open import LIf
open import LMonIf
open import IL1
open import Reader

----------------- Convert to IL1: Lift Locals -------------------

shifts-atm : Atm ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí Atm
shifts-atm (Num x) c n = Num x
shifts-atm (Bool b) c n = Bool b
shifts-atm (Var x) c n = Var (shifts-var x c n)

shifts-il1-exp : IL1-Exp ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí IL1-Exp
shifts-il1-exp (Atom a) c n =
    Atom (shifts-atm a c n) 
shifts-il1-exp Read c n =
    Read
shifts-il1-exp (Uni op a) c n =
    Uni op (shifts-atm a c n)
shifts-il1-exp (Bin op a‚ÇÅ a‚ÇÇ) c n =
    Bin op (shifts-atm a‚ÇÅ c n) (shifts-atm a‚ÇÇ c n)
shifts-il1-exp (Assign x e‚ÇÅ e‚ÇÇ) c n =
    Assign (shifts-var x c n) (shifts-il1-exp e‚ÇÅ c n) (shifts-il1-exp e‚ÇÇ c n)
shifts-il1-exp (If e‚ÇÅ e‚ÇÇ e‚ÇÉ) c n =
    If (shifts-il1-exp e‚ÇÅ c n) (shifts-il1-exp e‚ÇÇ c n) (shifts-il1-exp e‚ÇÉ c n)

-- Hoists all the Let's to the top, leaving in their place assignments.
--   let x = e‚ÇÅ in e‚ÇÇ
--   ==>
--   let x = 0 in { x := e‚Ä≤‚ÇÅ; e‚Ä≤‚ÇÇ }
--
--
--   Returns the number of let's around the expression:
--   let y‚ÇÅ=0,...,y·µ¢=0 in m‚ÇÅ
--   is represented as
--   i , m‚ÇÅ
lift-locals-mon : Mon ‚Üí ‚Ñï √ó IL1-Exp
lift-locals-mon (Atom a) = 0 , (Atom a)
lift-locals-mon Read = 0 , Read
lift-locals-mon (Uni op a) = 0 , (Uni op a)
lift-locals-mon (Bin op a‚ÇÅ a‚ÇÇ) = 0 , (Bin op a‚ÇÅ a‚ÇÇ)

lift-locals-mon (Let m‚ÇÅ m‚ÇÇ)
    with lift-locals-mon m‚ÇÅ
... | i , e‚ÇÅ
    with lift-locals-mon m‚ÇÇ
... | j , e‚ÇÇ
--   let x = (let y‚ÇÅ=0,...,y·µ¢=0 in m‚ÇÅ)
--   in (let z‚ÇÅ=0,...,z‚±º=0 in m‚ÇÇ)
--   ==>
--   let x=0, y‚ÇÅ=0,...,y·µ¢=0, z‚ÇÅ=0,...,z‚±º=0  in
--   i+j := (e‚ÇÅ ‚Üë j+1 cutoff 0);
--   (e‚ÇÇ ‚Üë i cutoff j)
    = (suc (i + j)) , Assign (i + j) (shifts-il1-exp e‚ÇÅ 0 (suc j)) (shifts-il1-exp e‚ÇÇ j i)
    
lift-locals-mon (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) 
    with lift-locals-mon m‚ÇÅ 
... | i , e‚ÇÅ
    with lift-locals-mon m‚ÇÇ 
... | j , e‚ÇÇ
    with lift-locals-mon m‚ÇÉ 
... | k , e‚ÇÉ
--  if (let x‚ÇÅ=0,...,x·µ¢=0 in m‚ÇÅ) then
--      (let y‚ÇÅ=0,...,y‚±º=0 in m‚ÇÇ)
--  else 
--      (let z‚ÇÅ=0,...,z_k=0 in m‚ÇÉ)
--  ==>
--  let x‚ÇÅ=0,...,x·µ¢=0, y‚ÇÅ=0,...,y‚±º=0, z‚ÇÅ=0,...,z_k=0 in
--  if (m‚ÇÅ ‚Üë j + k cutoff 0) then ((m‚ÇÇ ‚Üë k cutoff 0) ‚Üë i cutoff (k + j)) else (m‚ÇÉ ‚Üë i + j cutoff k)
    =
    let e‚Ä≤‚ÇÅ = shifts-il1-exp e‚ÇÅ 0 (j + k) in
    let e‚Ä≤‚ÇÇ = shifts-il1-exp (shifts-il1-exp e‚ÇÇ 0 k) (k + j) i in
    let e‚Ä≤‚ÇÉ = shifts-il1-exp e‚ÇÉ k (i + j) in
    (i + j + k) , (If e‚Ä≤‚ÇÅ e‚Ä≤‚ÇÇ e‚Ä≤‚ÇÉ)

lift-locals : Mon ‚Üí IL1-Prog
lift-locals m
    with lift-locals-mon m
... | n , e = Program n e    

---- Test lift-locals

S0 : Inputs
S0 = (1 , Œª x ‚Üí Data.Integer.+ x)

test : Mon ‚Üí Set
test P = interp-IL1 (lift-locals P) S0 ‚â° run (interp-mon P []) S0

P0 : Mon
P0 = Let Read (Atom (Var 0))
T0 : test P0
T0 = refl

P1 : Mon
P1 = Let Read (Let Read (Bin Sub (Var 0) (Var 1)))
T1 : test P1
T1 = refl

P2 : Mon
P2 = Let Read
      (Let (Let (Bin Sub (Var 0) (Num 1‚Ñ§)) (Bin Sub (Var 0) (Num -1‚Ñ§)))
       (Let (Uni Neg (Var 0))
        (Bin Sub (Var 2) (Var 0))))
T2 : test P2
T2 = refl

P3 : Mon
P3 = Let Read
      (If (Bin LessEq (Var 0) (Num 1‚Ñ§))
        (Let Read (Atom (Var 0)))
        (Let Read (Atom (Num 0‚Ñ§))))
T3 : test P3
T3 = refl

P4 : Mon
P4 = Let Read
       (If (Let Read (Bin LessEq (Var 0) (Num 1‚Ñ§)))
           (Let Read (Bin Sub (Var 0) (Var 1)))
           (Let Read (Bin Sub (Var 1) (Var 0))))
T4 : test P4
T4 = refl

