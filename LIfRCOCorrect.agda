module LIfRCOCorrect where

open import Agda.Builtin.Unit
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Bool using (if_then_else_)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§_; _‚â§·µá_; _‚à∏_; _+_; s‚â§s; _‚äî_)
open import Data.Nat.Properties
open import Data.Product
open import Data.Sum
open import Data.Integer using (‚Ñ§; -_; _-_; 0‚Ñ§)
open import Data.List
open import Data.List.Properties using (++-assoc; length-replicate; ++-identity ≥; length-++)
open import Data.Maybe
open import Relation.Binary.PropositionalEquality
   using (_‚â°_; refl; trans; sym; cong; cong-app)
open import Agda.Builtin.Bool renaming (Bool to ùîπ)
open import Relation.Nullary.Negation.Core using (¬¨_; contradiction)
open import Function.Base using (case_of_; case_returning_of_)

open import Reader
open import Utilities
open import LIf
open import LMonIf
open import LIfRCO


--------------- Proof of correctness for RCO ------------------------

interp-shift-atm : ‚àÄ (a : Atm) (v : Value) (œÅ‚ÇÅ œÅ‚ÇÇ : Env Value)
  ‚Üí interp-atm (shift-atm a (length œÅ‚ÇÅ)) (œÅ‚ÇÅ ++ v ‚à∑ œÅ‚ÇÇ) 
    ‚â° interp-atm a (œÅ‚ÇÅ ++ œÅ‚ÇÇ) 
interp-shift-atm (Num x) v œÅ‚ÇÅ œÅ‚ÇÇ = refl
interp-shift-atm (Bool x) v œÅ‚ÇÅ œÅ‚ÇÇ = refl
interp-shift-atm (Var x) v œÅ‚ÇÅ œÅ‚ÇÇ = nth-++-shift-var œÅ‚ÇÅ œÅ‚ÇÇ v x

interp-shift-mon : ‚àÄ (m : Mon) (v : Value) (œÅ‚ÇÅ œÅ‚ÇÇ : Env Value)
  ‚Üí interp-mon (shift-mon m (length œÅ‚ÇÅ)) (œÅ‚ÇÅ ++ (v ‚à∑ œÅ‚ÇÇ))
    ‚â° interp-mon m (œÅ‚ÇÅ ++ œÅ‚ÇÇ)
interp-shift-mon (Atom a) v œÅ‚ÇÅ œÅ‚ÇÇ rewrite interp-shift-atm a v œÅ‚ÇÅ œÅ‚ÇÇ = refl
interp-shift-mon Read v œÅ‚ÇÅ œÅ‚ÇÇ = refl
interp-shift-mon (Uni op a) v œÅ‚ÇÅ œÅ‚ÇÇ 
    rewrite interp-shift-atm a v œÅ‚ÇÅ œÅ‚ÇÇ
    = refl
interp-shift-mon (Bin op a‚ÇÅ a‚ÇÇ) v œÅ‚ÇÅ œÅ‚ÇÇ 
    rewrite interp-shift-atm a‚ÇÅ v œÅ‚ÇÅ œÅ‚ÇÇ
    | interp-shift-atm a‚ÇÇ v œÅ‚ÇÅ œÅ‚ÇÇ
    = refl
interp-shift-mon (Let m‚ÇÅ m‚ÇÇ) v œÅ‚ÇÅ œÅ‚ÇÇ 
  = extensionality Goal
  where
  Goal : (s : Inputs) ‚Üí
    interp-mon (shift-mon (Let m‚ÇÅ m‚ÇÇ) (length œÅ‚ÇÅ)) (œÅ‚ÇÅ ++ (v ‚à∑ œÅ‚ÇÇ)) s
    ‚â° interp-mon (Let m‚ÇÅ m‚ÇÇ) (œÅ‚ÇÅ ++ œÅ‚ÇÇ) s
  Goal s
      rewrite interp-shift-mon m‚ÇÅ v œÅ‚ÇÅ œÅ‚ÇÇ
      with interp-mon m‚ÇÅ (œÅ‚ÇÅ ++ œÅ‚ÇÇ) s
  ... | nothing = refl
  ... | just (v‚ÇÅ , s')
      rewrite interp-shift-mon m‚ÇÇ v (v‚ÇÅ ‚à∑ œÅ‚ÇÅ) œÅ‚ÇÇ
      = refl
interp-shift-mon (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) v œÅ‚ÇÅ œÅ‚ÇÇ 
  = extensionality Goal
  where
  Goal : (s : Inputs) ‚Üí
    interp-mon (shift-mon (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) (length œÅ‚ÇÅ)) (œÅ‚ÇÅ ++ (v ‚à∑ œÅ‚ÇÇ)) s
    ‚â° interp-mon (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) (œÅ‚ÇÅ ++ œÅ‚ÇÇ) s
  Goal s
      rewrite interp-shift-mon m‚ÇÅ v œÅ‚ÇÅ œÅ‚ÇÇ
      with interp-mon m‚ÇÅ (œÅ‚ÇÅ ++ œÅ‚ÇÇ) s
  ... | nothing = refl
  ... | just (Int n‚ÇÅ , s') = refl
  ... | just (Bool true , s')
      rewrite interp-shift-mon m‚ÇÇ v œÅ‚ÇÅ œÅ‚ÇÇ
      = refl
  ... | just (Bool false , s')
      rewrite interp-shift-mon m‚ÇÉ v œÅ‚ÇÅ œÅ‚ÇÇ
      = refl

rco-correct-exp : ‚àÄ (e : Exp) (œÅ : Env Value)
  ‚Üí interp-mon (rco e) œÅ ‚â° interp-exp e œÅ
rco-correct-exp (Num n) œÅ = refl
rco-correct-exp (Bool b) œÅ = refl
rco-correct-exp Read œÅ = refl
rco-correct-exp (Uni op e) œÅ = extensionality Goal
  where
  Goal : (s : Inputs) ‚Üí
         interp-mon (rco (Uni op e)) œÅ s ‚â° interp-exp (Uni op e) œÅ s
  Goal s
      rewrite rco-correct-exp e œÅ
      with interp-exp e œÅ s
  ... | nothing = refl
  ... | just (v‚ÇÅ , s')
      = refl
rco-correct-exp (Bin op e‚ÇÅ e‚ÇÇ) œÅ = extensionality Goal
  where
  Goal : (s : Inputs) ‚Üí
         interp-mon (rco (Bin op e‚ÇÅ e‚ÇÇ)) œÅ s ‚â° interp-exp (Bin op e‚ÇÅ e‚ÇÇ) œÅ s
  Goal s
      rewrite rco-correct-exp e‚ÇÅ œÅ
      with interp-exp e‚ÇÅ œÅ s
  ... | nothing = refl
  ... | just (v‚ÇÅ , s')
      rewrite interp-shift-mon (rco e‚ÇÇ) v‚ÇÅ [] œÅ
      | rco-correct-exp e‚ÇÇ œÅ
      = refl
rco-correct-exp (Var i‚ÇÅ) œÅ = refl
rco-correct-exp (Let e‚ÇÅ e‚ÇÇ) œÅ = extensionality Goal
  where
  Goal : (s : Inputs) ‚Üí
         interp-mon (rco (Let e‚ÇÅ e‚ÇÇ)) œÅ s ‚â° interp-exp (Let e‚ÇÅ e‚ÇÇ) œÅ s  
  Goal s
      rewrite rco-correct-exp e‚ÇÅ œÅ
      with interp-exp e‚ÇÅ œÅ s
  ... | nothing = refl
  ... | just (v‚ÇÅ , s')
      rewrite rco-correct-exp e‚ÇÇ (v‚ÇÅ ‚à∑ œÅ)
      = refl
rco-correct-exp (If e‚ÇÅ e‚ÇÇ e‚ÇÉ) œÅ = extensionality Goal
  where
  Goal : (s : Inputs) ‚Üí
         interp-mon (rco (If e‚ÇÅ e‚ÇÇ e‚ÇÉ)) œÅ s ‚â° interp-exp (If e‚ÇÅ e‚ÇÇ e‚ÇÉ) œÅ s  
  Goal s
      rewrite rco-correct-exp e‚ÇÅ œÅ
      with interp-exp e‚ÇÅ œÅ s
  ... | nothing = refl
  ... | just (Int n‚ÇÅ , s') = refl
  ... | just (Bool true , s') rewrite rco-correct-exp e‚ÇÇ œÅ = refl
  ... | just (Bool false , s') rewrite rco-correct-exp e‚ÇÉ œÅ = refl

rco-correct : ‚àÄ (e : Exp) (s : Inputs)
  ‚Üí interp-LMonIf (rco e) s ‚â° interp-LIf e s 
rco-correct e s rewrite rco-correct-exp e [] = refl
