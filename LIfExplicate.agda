--------------- Proof of correctness for Explicate Control -------------------

-- This one is broken because big-step doesn't work. See below.

explicate-tail-correct : ‚àÄ {e : IL1-Exp}{œÅ : Env Value}{B B' : Blocks}{t : CTail}{s : Inputs}{r : Value √ó Inputs}
  ‚Üí explicate-tail e B ‚â° (t , B')
  ‚Üí interp-il1-exp e œÅ s ‚â° just r
  ‚Üí  œÅ , s , B' ‚ä¢ t ‚áì r
  
explicate-assign-correct : ‚àÄ{y : Id}{e : IL1-Exp} {t t' : CTail}{œÅ : Env Value}
   {B‚ÇÇ B‚ÇÉ : Blocks} {s s1 : Inputs} {v : Value}{r : Value √ó Inputs}
  ‚Üí explicate-assign y e t B‚ÇÇ ‚â° (t' , B‚ÇÉ)
  ‚Üí interp-il1-exp e œÅ s ‚â° just (v , s1)
  ‚Üí (update œÅ y v) , s1 , B‚ÇÉ ‚ä¢ t ‚áì r
  ‚Üí œÅ , s , B‚ÇÉ ‚ä¢ t' ‚áì r

explicate-pred-correct : ‚àÄ (e‚ÇÅ : IL1-Exp) (t‚ÇÅ t‚ÇÇ t‚ÇÉ : CTail) (œÅ : Env Value)
    (B‚ÇÑ B‚ÇÖ : Blocks) (s s1 : Inputs) (r : Value √ó Inputs) (b : ùîπ)
  ‚Üí explicate-pred e‚ÇÅ t‚ÇÇ t‚ÇÉ B‚ÇÑ ‚â° (t‚ÇÅ , B‚ÇÖ)
  ‚Üí interp-il1-exp e‚ÇÅ œÅ s ‚â° just (Value.Bool b , s1)
  -- Problem! œÅ is incorrect below, if e‚ÇÅ is Assign, œÅ changes!
  ‚Üí œÅ , s1 , B‚ÇÖ ‚ä¢ (if b then t‚ÇÇ else t‚ÇÉ) ‚áì r
  ‚Üí œÅ , s , B‚ÇÖ ‚ä¢ t‚ÇÅ ‚áì r

explicate-assign-correct {y} {Atom a} {t} {t'} {œÅ} {B‚ÇÇ} {B‚ÇÉ} {s} ea ie t‚áì = {!!}
explicate-assign-correct {y} {Read} {t} {t'} {œÅ} {B‚ÇÇ} {B‚ÇÉ} {s} ea ie t‚áì = {!!}
explicate-assign-correct {y} {Uni op a} {t} {t'} {œÅ} {B‚ÇÇ} {B‚ÇÉ} {s} ea ie t‚áì = {!!}
explicate-assign-correct {y} {Bin op a‚ÇÅ a‚ÇÇ} {t} {t'} {œÅ} {B‚ÇÇ} {B‚ÇÉ} {s} ea ie t‚áì = {!!}
explicate-assign-correct {y} {Assign x e‚ÇÅ e‚ÇÇ} {t} {t'} {œÅ} {B‚ÇÇ} {B‚ÇÉ} {s} ea ie t‚áì = {!!}
explicate-assign-correct {y} {If e‚ÇÅ e‚ÇÇ e‚ÇÉ} {t} {t'} {œÅ} {B‚ÇÇ} {B‚ÇÉ} {s} ea ie t‚áì = {!!}

explicate-tail-correct {(Atom a)} refl ie = return-‚áì ie
explicate-tail-correct {Read} refl ie = return-‚áì ie
explicate-tail-correct {(Uni op a)} refl ie = return-‚áì ie
explicate-tail-correct {(Bin op a‚ÇÅ a‚ÇÇ)} refl ie = return-‚áì ie
explicate-tail-correct {(Assign x e‚ÇÅ e‚ÇÇ)}{œÅ}{B}{B'}{t}{s}{r} et ie
    with explicate-tail e‚ÇÇ B in et2
... | t‚ÇÇ , B‚ÇÅ
    with interp-il1-exp e‚ÇÅ œÅ s in ie1 | ie
... | nothing | ()
... | just (v‚ÇÅ , s1) | ie2
    with explicate-tail-correct {e‚ÇÇ} et2 ie2
... | t‚ÇÇ‚áìr
    =
    let B‚ÇÅ‚ÜùB' = explicate-assign-blocks x e‚ÇÅ t‚ÇÇ t B‚ÇÅ B' et in
    let B'‚ä¢t‚ÇÇ‚áìr = eval-tail-blocks t‚ÇÇ (update œÅ x v‚ÇÅ) B‚ÇÅ B' s1 (r .proj‚ÇÇ) (r .proj‚ÇÅ) B‚ÇÅ‚ÜùB' t‚ÇÇ‚áìr in
    explicate-assign-correct {e = e‚ÇÅ} et ie1 B'‚ä¢t‚ÇÇ‚áìr
explicate-tail-correct {(If e‚ÇÅ e‚ÇÇ e‚ÇÉ)}{œÅ}{B}{B'}{t}{s}{r} et ie
    with explicate-tail e‚ÇÇ B in et2
... | t‚ÇÇ , B‚ÇÅ
    with explicate-tail e‚ÇÉ B‚ÇÅ in et3
... | t‚ÇÉ , B‚ÇÇ
    with interp-il1-exp e‚ÇÅ œÅ s in ie1 | ie
... | nothing | ()
... | just (Int n , s1) | ()
... | just (Bool true , s1) | ie2 =
    let t‚ÇÇ‚áìr = explicate-tail-correct {e‚ÇÇ} et2 ie2 in
    let B‚ÇÅ‚ÜùB‚ÇÇ = explicate-tail-blocks e‚ÇÉ B‚ÇÅ B‚ÇÇ t‚ÇÉ et3 in
    let B‚ÇÇ‚ÜùB' = explicate-pred-blocks e‚ÇÅ t‚ÇÇ t‚ÇÉ t B‚ÇÇ B' et in
    let B'‚ä¢t‚ÇÇ‚áìr = eval-tail-blocks t‚ÇÇ œÅ B‚ÇÅ B' s1 (r .proj‚ÇÇ) (r .proj‚ÇÅ) (‚Üù-trans B‚ÇÅ‚ÜùB‚ÇÇ B‚ÇÇ‚ÜùB') t‚ÇÇ‚áìr in
    explicate-pred-correct e‚ÇÅ t t‚ÇÇ t‚ÇÉ œÅ B‚ÇÇ B' s s1 r true et ie1 B'‚ä¢t‚ÇÇ‚áìr
... | just (Bool false , s1) | ie2 =
    let t‚ÇÉ‚áìr = explicate-tail-correct {e‚ÇÉ} et3 ie2 in
    let B‚ÇÇ‚ÜùB' = explicate-pred-blocks e‚ÇÅ t‚ÇÇ t‚ÇÉ t B‚ÇÇ B' et in
    let B'‚ä¢t‚ÇÉ‚áìr = eval-tail-blocks t‚ÇÉ œÅ B‚ÇÇ B' s1 (r .proj‚ÇÇ) (r .proj‚ÇÅ) B‚ÇÇ‚ÜùB' t‚ÇÉ‚áìr in
    explicate-pred-correct e‚ÇÅ t t‚ÇÇ t‚ÇÉ œÅ B‚ÇÇ B' s s1 r false et ie1 B'‚ä¢t‚ÇÉ‚áìr

explicate-pred-correct (Atom a) t‚ÇÅ t‚ÇÇ t‚ÇÉ œÅ B B‚Ä≤ s s1 r b refl ie eb
    with interp-atm a œÅ in ia | ie
... | nothing | ()
... | just (Bool true) | refl =
    if-‚áì-true cond (goto-‚áì nth-t‚ÇÇ eb)
    where
    nth-t‚ÇÇ : nth ((B ++ t‚ÇÇ ‚à∑ []) ++ t‚ÇÉ ‚à∑ []) (length B) ‚â° just t‚ÇÇ
    nth-t‚ÇÇ rewrite ++-assoc B [ t‚ÇÇ ] [ t‚ÇÉ ] | sym (+-identity ≥ (length B))
       | nth-++-+ B (t‚ÇÇ ‚à∑ t‚ÇÉ ‚à∑ []) 0 = refl
    cond : interp-CExp (Bin Eq a (Bool true)) œÅ s ‚â° just (Bool true , s)
    cond rewrite ia = refl
... | just (Bool false) | refl =
    if-‚áì-false cond (goto-‚áì nth-t‚ÇÉ eb)
    where
    nth-t‚ÇÉ : nth ((B ++ t‚ÇÇ ‚à∑ []) ++ t‚ÇÉ ‚à∑ []) (length (B ++ t‚ÇÇ ‚à∑ [])) ‚â° just t‚ÇÉ
    nth-t‚ÇÉ rewrite sym (+-identity ≥ (length (B ++ t‚ÇÇ ‚à∑ [])))
        | nth-++-+ (B ++ t‚ÇÇ ‚à∑ []) [ t‚ÇÉ ] 0 = refl
    cond : interp-CExp (Bin Eq a (Bool true)) œÅ s ‚â° just (Bool false , s)
    cond rewrite ia = refl
explicate-pred-correct Read t‚ÇÅ t‚ÇÇ t‚ÇÉ œÅ B‚ÇÑ B‚ÇÖ s s1 r b ep () eb
explicate-pred-correct (Uni Neg a) t‚ÇÅ t‚ÇÇ t‚ÇÉ œÅ B‚ÇÑ B‚ÇÖ s s1 r b ep ie eb
    with interp-atm a œÅ | ie
... | nothing | ()
... | just (Int x) | ()
... | just (Bool x) | ()
explicate-pred-correct (Uni Not a) t‚ÇÅ t‚ÇÇ t‚ÇÉ œÅ B B‚Ä≤ s s1 r b refl ie eb
    with interp-atm a œÅ in ia | ie
... | nothing | ()
... | just (Bool true) | refl =
    if-‚áì-true cond (goto-‚áì nth-t‚ÇÉ eb)
    where
    nth-t‚ÇÉ : nth ((B ++ t‚ÇÉ ‚à∑ []) ++ t‚ÇÇ ‚à∑ []) (length B) ‚â° just t‚ÇÉ
    nth-t‚ÇÉ rewrite ++-assoc B [ t‚ÇÉ ] [ t‚ÇÇ ] | sym (+-identity ≥ (length B))
      | nth-++-+ B (t‚ÇÉ ‚à∑ t‚ÇÇ ‚à∑ []) 0 = refl
    cond : interp-CExp (Bin Eq a (Bool true)) œÅ s ‚â° just (Bool true , s)
    cond rewrite ia = refl
... | just (Bool false) | refl =
    if-‚áì-false cond (goto-‚áì nth-t‚ÇÇ eb)
    where
    nth-t‚ÇÇ : nth ((B ++ t‚ÇÉ ‚à∑ []) ++ t‚ÇÇ ‚à∑ []) (length (B ++ t‚ÇÉ ‚à∑ [])) ‚â° just t‚ÇÇ
    nth-t‚ÇÇ rewrite sym (+-identity ≥ (length (B ++ t‚ÇÉ ‚à∑ [])))
        | nth-++-+ (B ++ t‚ÇÉ ‚à∑ []) [ t‚ÇÇ ] 0 = refl

    cond : interp-CExp (Bin Eq a (Bool true)) œÅ s ‚â° just (Bool false , s)
    cond rewrite ia = refl
explicate-pred-correct (Bin op a‚ÇÅ a‚ÇÇ) t‚ÇÅ t‚ÇÇ t‚ÇÉ œÅ B‚ÇÑ B‚ÇÖ s s1 r b refl ie eb
    with interp-atm a‚ÇÅ œÅ in ia1 | interp-atm a‚ÇÇ œÅ in ia2
... | just v‚ÇÅ | just v‚ÇÇ
    with b
... | true    
    = if-‚áì-true cond (goto-‚áì nth-t‚ÇÇ eb)
    where
    nth-t‚ÇÇ : nth ((B‚ÇÑ ++ t‚ÇÇ ‚à∑ []) ++ t‚ÇÉ ‚à∑ []) (length B‚ÇÑ) ‚â° just t‚ÇÇ
    nth-t‚ÇÇ rewrite ++-assoc B‚ÇÑ [ t‚ÇÇ ] [ t‚ÇÉ ]
        | nth-++-length B‚ÇÑ (t‚ÇÉ ‚à∑ []) t‚ÇÇ = refl

    cond : interp-CExp (Bin op a‚ÇÅ a‚ÇÇ) œÅ s ‚â° just (Bool true , s1)
    cond rewrite ia1 | ia2 = ie
... | false
    = if-‚áì-false cond (goto-‚áì nth-t‚ÇÉ eb)
    where
    nth-t‚ÇÉ : nth ((B‚ÇÑ ++ t‚ÇÇ ‚à∑ []) ++ t‚ÇÉ ‚à∑ []) (length (B‚ÇÑ ++ t‚ÇÇ ‚à∑ [])) ‚â° just t‚ÇÉ
    nth-t‚ÇÉ rewrite nth-++-length (B‚ÇÑ ++ t‚ÇÇ ‚à∑ []) [] t‚ÇÉ = refl
    cond : interp-CExp (Bin op a‚ÇÅ a‚ÇÇ) œÅ s ‚â° just (Bool false , s1)
    cond rewrite ia1 | ia2 = ie
explicate-pred-correct (Assign x e‚ÇÅ e‚ÇÇ) t-out thn els œÅ B B' s s1 r b ep ie eb
    with explicate-pred e‚ÇÇ thn els B in et2
... | t‚ÇÇ , B‚ÇÅ    
    with interp-il1-exp e‚ÇÅ œÅ s in ie1 | ie
... | nothing | ()
... | just (v‚ÇÅ , s2) | ie‚Ä≤
    =
    let t‚ÇÇ‚áìr = explicate-pred-correct e‚ÇÇ t‚ÇÇ thn els (update œÅ x v‚ÇÅ) B B‚ÇÅ s2 s1 r b et2 ie‚Ä≤ {!!} in
    {!!}
explicate-pred-correct (If e‚ÇÅ e‚ÇÇ e‚ÇÉ) t‚ÇÅ t‚ÇÇ t‚ÇÉ œÅ B‚ÇÑ B‚ÇÖ s s1 r b ep ie eb = {!!}


explicate-correct : ‚àÄ (p : IL1-Prog) (s : Inputs) (v : Value)
  ‚Üí interp-IL1 p s ‚â° just v
  ‚Üí eval-CIf (explicate p) s  v
explicate-correct (Program n e) s v ip
    with explicate-tail e [] in ete
... | t , B
    with create-block t B in cb
... | lbl , B'    
    with interp-il1-exp e (replicate n (Int (‚Ñ§.pos 0))) s in ie | ip
... | nothing | ()
... | just (v , s1) | refl
    =
    let œÅ‚ÇÄ = replicate n (Int (‚Ñ§.pos 0)) in
    let t‚áì = explicate-tail-correct {e}{œÅ‚ÇÄ}{[]}{B} ete ie in
    s1 , goto-‚áì eq (eval-tail-blocks t œÅ‚ÇÄ B (B ++ t ‚à∑ []) s s1 _ ((t ‚à∑ []) , refl) t‚áì)
    where
    eq : nth (B ++ t ‚à∑ []) (foldr (Œª _ ‚Üí suc) 0 B) ‚â° just t
    eq rewrite sym (+-identity ≥ (length B)) | nth-++-+ B (t ‚à∑ []) 0 = refl

