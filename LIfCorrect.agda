module LIfCorrect where

open import Agda.Builtin.Unit
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Bool using (if_then_else_)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§_; _‚â§·µá_; _‚à∏_; _+_; s‚â§s; _‚äî_)
open import Data.Nat.Properties
open import Data.Product
open import Data.Sum
open import Data.Integer using (‚Ñ§; -_; _-_; 0‚Ñ§)
open import Data.List
open import Data.List.Properties using (++-assoc; length-replicate; ++-identity ≥; length-++)
open import Data.Maybe
open import Relation.Binary.PropositionalEquality
   using (_‚â°_; refl; trans; sym; cong; cong-app)
open import Agda.Builtin.Bool renaming (Bool to ùîπ)
open import Relation.Nullary.Negation.Core using (¬¨_; contradiction)
open import Function.Base using (case_of_; case_returning_of_)

open import Reader
open import Utilities
open import LIf
open import LIfTypePres

--------------- Proof of correctness for Explicate Control -------------------

_‚Üù_ : Blocks ‚Üí Blocks ‚Üí Set
B‚ÇÅ ‚Üù B‚ÇÇ = Œ£[ B ‚àà Blocks ] B‚ÇÅ ++ B ‚â° B‚ÇÇ

‚Üù-trans : ‚àÄ {B‚ÇÅ B‚ÇÇ B‚ÇÉ : Blocks}
  ‚Üí B‚ÇÅ ‚Üù B‚ÇÇ  ‚Üí B‚ÇÇ ‚Üù B‚ÇÉ
  ‚Üí B‚ÇÅ ‚Üù B‚ÇÉ
‚Üù-trans {B‚ÇÅ}{B‚ÇÇ}{B‚ÇÉ} (B , eq12) (B' , eq23)
  rewrite sym eq12 | sym eq23  | ++-assoc B‚ÇÅ B B'
  = B ++ B' , refl

‚Üù-create-block : (t : CTail) (B B' : Blocks) (lbl : ‚Ñï)
  ‚Üí create-block t B ‚â° (lbl , B')
  ‚Üí B ‚Üù B'
‚Üù-create-block t B B' lbl refl = [ t ] , refl

explicate-tail-blocks : ‚àÄ (m : IL1-Exp) (B‚ÇÅ B‚ÇÇ : Blocks) (t : CTail)
  ‚Üí explicate-tail m B‚ÇÅ ‚â° (t , B‚ÇÇ)
  ‚Üí B‚ÇÅ ‚Üù B‚ÇÇ
explicate-assign-blocks : ‚àÄ (x : Id) (m : IL1-Exp) (t t' : CTail) (B‚ÇÅ B‚ÇÇ : Blocks)
  ‚Üí explicate-assign x m t B‚ÇÅ ‚â° (t' , B‚ÇÇ)
  ‚Üí B‚ÇÅ ‚Üù B‚ÇÇ
explicate-pred-blocks : ‚àÄ (m : IL1-Exp) (t‚ÇÅ t‚ÇÇ t : CTail) (B‚ÇÅ B‚ÇÇ : Blocks)
  ‚Üí explicate-pred m t‚ÇÅ t‚ÇÇ B‚ÇÅ ‚â° (t , B‚ÇÇ)
  ‚Üí B‚ÇÅ ‚Üù B‚ÇÇ

explicate-tail-blocks (Atom a) B‚ÇÅ B‚ÇÇ t refl = [] , (++-identity ≥ B‚ÇÅ)
explicate-tail-blocks Read B‚ÇÅ B‚ÇÇ t refl = [] , (++-identity ≥ B‚ÇÅ)
explicate-tail-blocks (Uni op a) B‚ÇÅ B‚ÇÇ t refl = [] , ++-identity ≥ B‚ÇÅ
explicate-tail-blocks (Bin op a‚ÇÅ a‚ÇÇ) B‚ÇÅ B‚ÇÇ t refl = [] , ++-identity ≥ B‚ÇÅ
explicate-tail-blocks (Assign x m‚ÇÅ m‚ÇÇ) B‚ÇÅ B‚ÇÇ t refl
    with explicate-tail m‚ÇÇ B‚ÇÅ in et
... | (t‚ÇÇ , B)
    with explicate-assign x m‚ÇÅ t‚ÇÇ B in el
... | (t‚ÇÅ , B') =
  let B‚ÇÅ‚ÜùB = explicate-tail-blocks m‚ÇÇ B‚ÇÅ B t‚ÇÇ et in
  let B‚ÜùB' = explicate-assign-blocks x m‚ÇÅ t‚ÇÇ t‚ÇÅ B B' el in
  ‚Üù-trans B‚ÇÅ‚ÜùB B‚ÜùB'
explicate-tail-blocks (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) B‚ÇÅ B‚ÇÇ t et
    with explicate-tail m‚ÇÇ B‚ÇÅ in et2
... | (t‚ÇÇ , B)
    with explicate-tail m‚ÇÉ B in et3
... | (t‚ÇÉ , B') =
    let B‚ÇÅ‚ÜùB = explicate-tail-blocks m‚ÇÇ B‚ÇÅ B t‚ÇÇ et2 in
    let B‚ÜùB' = explicate-tail-blocks m‚ÇÉ B B' t‚ÇÉ et3 in
    let B'‚ÜùB‚ÇÇ = explicate-pred-blocks m‚ÇÅ t‚ÇÇ t‚ÇÉ t B' B‚ÇÇ et in
    ‚Üù-trans B‚ÇÅ‚ÜùB (‚Üù-trans B‚ÜùB' B'‚ÜùB‚ÇÇ)

explicate-assign-blocks y (Atom a) t t' B‚ÇÅ B‚ÇÇ refl = [] , ++-identity ≥ B‚ÇÅ
explicate-assign-blocks y Read t t' B‚ÇÅ B‚ÇÇ refl = [] , (++-identity ≥ B‚ÇÅ)
explicate-assign-blocks y (Uni op a) t t' B‚ÇÅ B‚ÇÇ refl = [] , ++-identity ≥ B‚ÇÅ
explicate-assign-blocks y (Bin op a‚ÇÅ a‚ÇÇ) t t' B‚ÇÅ B‚ÇÇ refl = [] , ++-identity ≥ B‚ÇÅ
explicate-assign-blocks y (Assign x m‚ÇÅ m‚ÇÇ) t t' B‚ÇÅ B‚ÇÇ refl =
    let (t‚ÇÇ , B) = explicate-assign y m‚ÇÇ t B‚ÇÅ in 
    let B‚ÇÅ‚ÜùB = explicate-assign-blocks y m‚ÇÇ t t‚ÇÇ B‚ÇÅ B refl in
    let B‚ÜùB‚ÇÇ = explicate-assign-blocks x m‚ÇÅ t‚ÇÇ t' B B‚ÇÇ refl in
    ‚Üù-trans B‚ÇÅ‚ÜùB B‚ÜùB‚ÇÇ 
explicate-assign-blocks y (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) t t' B‚ÇÅ B‚ÇÇ el =
    let (cont , B) = create-block t B‚ÇÅ in
    let (t‚ÇÇ , B') = explicate-assign y m‚ÇÇ (Goto cont) B in 
    let (t‚ÇÉ , B'') = explicate-assign y m‚ÇÉ (Goto cont) B' in 
    let B‚ÇÅ‚ÜùB = ‚Üù-create-block t B‚ÇÅ B cont refl in
    let B‚ÜùB' = explicate-assign-blocks y m‚ÇÇ (Goto cont) t‚ÇÇ B B' refl in
    let B'‚ÜùB'' = explicate-assign-blocks y m‚ÇÉ (Goto cont) t‚ÇÉ B' B'' refl in
    let B''‚ÜùB‚ÇÇ = explicate-pred-blocks m‚ÇÅ t‚ÇÇ t‚ÇÉ t' B'' B‚ÇÇ el in
    ‚Üù-trans B‚ÇÅ‚ÜùB (‚Üù-trans B‚ÜùB' (‚Üù-trans B'‚ÜùB'' B''‚ÜùB‚ÇÇ))

explicate-pred-blocks (Atom a) t‚ÇÅ t‚ÇÇ t B‚ÇÅ B‚ÇÇ refl =
    let (l1 , B) = create-block t‚ÇÅ B‚ÇÅ in 
    let (l2 , B') = create-block t‚ÇÇ B in 
    let B‚ÇÅ‚ÜùB = ‚Üù-create-block t‚ÇÅ B‚ÇÅ B l1 refl in
    let B‚ÜùB' = ‚Üù-create-block t‚ÇÇ B B' l2 refl in
    ‚Üù-trans B‚ÇÅ‚ÜùB B‚ÜùB'
explicate-pred-blocks Read t‚ÇÅ t‚ÇÇ t B‚ÇÅ B‚ÇÇ refl = [] , ++-identity ≥ B‚ÇÅ 
explicate-pred-blocks (Uni Neg a) t‚ÇÅ t‚ÇÇ t B‚ÇÅ B‚ÇÇ refl = [] , (++-identity ≥ B‚ÇÅ)
explicate-pred-blocks (Uni Not a) t‚ÇÅ t‚ÇÇ t B‚ÇÅ B‚ÇÇ refl =
    let (l2 , B) = create-block t‚ÇÇ B‚ÇÅ in
    let (l1 , B') = create-block t‚ÇÅ B in 
    let B‚ÇÅ‚ÜùB = ‚Üù-create-block t‚ÇÇ B‚ÇÅ B l2 refl in
    let B‚ÜùB' = ‚Üù-create-block t‚ÇÅ B B' l1 refl in
    ‚Üù-trans B‚ÇÅ‚ÜùB B‚ÜùB'
explicate-pred-blocks (Bin op a‚ÇÅ a‚ÇÇ) t‚ÇÅ t‚ÇÇ t B‚ÇÅ B‚ÇÇ refl =
    let (l1 , B) = create-block t‚ÇÅ B‚ÇÅ in 
    let (l2 , B') = create-block t‚ÇÇ B in 
    let B‚ÇÅ‚ÜùB = ‚Üù-create-block t‚ÇÅ B‚ÇÅ B l1 refl in
    let B‚ÜùB' = ‚Üù-create-block t‚ÇÇ B B' l2 refl in
    ‚Üù-trans B‚ÇÅ‚ÜùB B‚ÜùB'
explicate-pred-blocks (Assign x m‚ÇÅ m‚ÇÇ) thn els t B‚ÇÅ B‚ÇÇ ep =
    let (t‚ÇÇ , B) = explicate-pred m‚ÇÇ thn els B‚ÇÅ in 
    let B‚ÇÅ‚ÜùB = explicate-pred-blocks m‚ÇÇ thn els t‚ÇÇ B‚ÇÅ B refl in
    let B‚ÜùB‚ÇÇ = explicate-assign-blocks x m‚ÇÅ t‚ÇÇ t B B‚ÇÇ ep in
    ‚Üù-trans B‚ÇÅ‚ÜùB B‚ÜùB‚ÇÇ 
explicate-pred-blocks (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) thn els t B‚ÇÅ B‚ÇÇ refl =
    let (lbl-thn , B) = create-block thn B‚ÇÅ in 
    let (lbl-els , B') = create-block els B in 
    let (t‚ÇÇ , B'') = explicate-pred m‚ÇÇ (Goto lbl-thn) (Goto lbl-els) B' in 
    let (t‚ÇÉ , B''') = explicate-pred m‚ÇÉ (Goto lbl-thn) (Goto lbl-els) B'' in 
    let B‚ÇÅ‚ÜùB = ‚Üù-create-block thn B‚ÇÅ B lbl-thn refl in
    let B‚ÜùB' = ‚Üù-create-block els B B' lbl-els refl in
    let B'‚ÜùB'' = explicate-pred-blocks m‚ÇÇ (Goto lbl-thn) (Goto lbl-els) t‚ÇÇ B' B'' refl in
    let B''‚ÜùB''' = explicate-pred-blocks m‚ÇÉ (Goto lbl-thn) (Goto lbl-els) t‚ÇÉ B'' B''' refl in
    let B'''‚ÜùB‚ÇÇ = explicate-pred-blocks m‚ÇÅ t‚ÇÇ t‚ÇÉ t B''' B‚ÇÇ refl in
    ‚Üù-trans B‚ÇÅ‚ÜùB (‚Üù-trans B‚ÜùB' (‚Üù-trans B'‚ÜùB'' (‚Üù-trans B''‚ÜùB''' B'''‚ÜùB‚ÇÇ)))

nth-blocks : ‚àÄ {B‚ÇÅ B‚ÇÇ : Blocks} {l : ‚Ñï} {t : CTail}
  ‚Üí B‚ÇÅ ‚Üù B‚ÇÇ
  ‚Üí nth B‚ÇÅ l ‚â° just t
  ‚Üí nth B‚ÇÇ l ‚â° just t
nth-blocks {B‚ÇÅ}{l = l}{t} (B , refl) n1 = nth-++-just B‚ÇÅ B l t n1

eval-tail-blocks : ‚àÄ (t : CTail) (œÅ : Env Value) (B‚ÇÅ B‚ÇÇ : Blocks) (s s' : Inputs) (v : Value)
  ‚Üí B‚ÇÅ ‚Üù B‚ÇÇ
  ‚Üí œÅ , s , B‚ÇÅ ‚ä¢ t ‚áì (v , s')
  ‚Üí œÅ , s , B‚ÇÇ ‚ä¢ t ‚áì (v , s')
eval-tail-blocks (Return e) œÅ B‚ÇÅ B‚ÇÇ s s' v B12 (return-‚áì eq) =
  return-‚áì eq
eval-tail-blocks (Assign x e t) œÅ B‚ÇÅ B‚ÇÇ s s' v B12 (assign-‚áì ie t‚áì) =
  assign-‚áì ie (eval-tail-blocks t _ B‚ÇÅ B‚ÇÇ _ s' v B12 t‚áì)
eval-tail-blocks (If op a‚ÇÅ a‚ÇÇ thn els) œÅ B‚ÇÅ B‚ÇÇ s s' v B12 (if-‚áì-true iop t‚áì) =
  if-‚áì-true iop (eval-tail-blocks _ œÅ B‚ÇÅ B‚ÇÇ _ s' v B12 t‚áì)
eval-tail-blocks (If op a‚ÇÅ a‚ÇÇ thn els) œÅ B‚ÇÅ B‚ÇÇ s s' v B12 (if-‚áì-false iop t‚áì) =
  if-‚áì-false iop (eval-tail-blocks _ œÅ B‚ÇÅ B‚ÇÇ _ s' v B12 t‚áì)
eval-tail-blocks (Goto l) œÅ B‚ÇÅ B‚ÇÇ s s' v B12 (goto-‚áì nth t‚áì) =
  goto-‚áì (nth-blocks B12 nth) (eval-tail-blocks _ œÅ B‚ÇÅ B‚ÇÇ s s' v B12 t‚áì)

create-block-nth : ‚àÄ (t : CTail) (B B' : Blocks) (lbl : Id)
  ‚Üí create-block t B ‚â° (lbl , B')
  ‚Üí nth B' lbl ‚â° just t
create-block-nth t B B' lbl refl rewrite nth-++-1 B t = refl


explicate-pred-correct : ‚àÄ (e : IL1-Exp) {thn els : CTail}{œÅ : Env Value}{s‚ÇÅ s‚ÇÇ s‚ÇÉ : Inputs}
   ‚Üí explicate-pred e thn els B ‚â° (t , B')
   ‚Üí interp-il1-exp e œÅ s‚ÇÅ ‚â° just (Value.Bool b , s‚ÇÇ)
   ‚Üí B' , œÅ , s‚ÇÅ ‚ä¢ t ‚ü∂ step t' , œÅ' , s''
   (if b then thn else els)

-- explicate-pred-correct : ‚àÄ (e‚ÇÅ : IL1-Exp) (t‚ÇÅ t‚ÇÇ t‚ÇÉ : CTail) (œÅ : Env Value)
--     (B‚ÇÑ B‚ÇÖ : Blocks) (s s1 : Inputs) (r : Value √ó Inputs) (b : ùîπ)
--   ‚Üí explicate-pred e‚ÇÅ t‚ÇÇ t‚ÇÉ B‚ÇÑ ‚â° (t‚ÇÅ , B‚ÇÖ)
--   ‚Üí interp-il1-exp e‚ÇÅ œÅ s ‚â° just (Value.Bool b , s1)
--   -- Problem! œÅ is incorrect below, if e‚ÇÅ is Assign, œÅ changes!
--   ‚Üí œÅ , s1 , B‚ÇÖ ‚ä¢ (if b then t‚ÇÇ else t‚ÇÉ) ‚áì r
--   ‚Üí œÅ , s , B‚ÇÖ ‚ä¢ t‚ÇÅ ‚áì r

-- explicate-assign-correct : ‚àÄ{y : Id}{e : IL1-Exp} {t t' : CTail}{œÅ : Env Value}
--    {B‚ÇÇ B‚ÇÉ : Blocks} {s s1 : Inputs} {v : Value}{r : Value √ó Inputs}
--   ‚Üí explicate-assign y e t B‚ÇÇ ‚â° (t' , B‚ÇÉ)
--   ‚Üí interp-il1-exp e œÅ s ‚â° just (v , s1)
--   ‚Üí (update œÅ y v) , s1 , B‚ÇÉ ‚ä¢ t ‚áì r
--   ‚Üí œÅ , s , B‚ÇÉ ‚ä¢ t' ‚áì r

-- explicate-tail-correct : ‚àÄ {e : IL1-Exp}{œÅ : Env Value}{B B' : Blocks}{t : CTail}{s : Inputs}{r : Value √ó Inputs}
--   ‚Üí explicate-tail e B ‚â° (t , B')
--   ‚Üí interp-il1-exp e œÅ s ‚â° just r
--   ‚Üí  œÅ , s , B' ‚ä¢ t ‚áì r
  


