module LIfTypePres where

open import Agda.Builtin.Unit
open import Data.Empty using (‚ä•; ‚ä•-elim)
import Data.Bool
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§_; _‚â§·µá_; _‚à∏_; _+_; s‚â§s)
open import Data.Nat.Properties
open import Data.Product
open import Data.Sum
open import Data.Integer using (‚Ñ§; -_; _-_; 0‚Ñ§)
open import Data.List
open import Data.List.Properties using (++-assoc; length-replicate; ++-identity ≥)
open import Data.Maybe
open import Relation.Binary.PropositionalEquality
   using (_‚â°_; refl; trans; sym; cong; cong-app)
open import Agda.Builtin.Bool renaming (Bool to ùîπ)
open import Relation.Nullary.Negation.Core using (¬¨_; contradiction)
open import Function.Base using (case_of_; case_returning_of_)

open import Reader
open import Utilities
open import LIf

TypeEnv : Set
TypeEnv = List Type

wt-uniop : UniOp ‚Üí Type ‚Üí Maybe Type
wt-uniop Neg IntT = just IntT
wt-uniop Neg BoolT = nothing
wt-uniop Not IntT = nothing
wt-uniop NOt BoolT = just BoolT

wt-binop : BinOp ‚Üí Type ‚Üí Type ‚Üí Maybe Type
wt-binop Sub IntT IntT = just IntT
wt-binop Sub IntT BoolT = nothing
wt-binop Sub BoolT t2 = nothing
wt-binop Eq IntT IntT = just BoolT
wt-binop Eq IntT BoolT = nothing
wt-binop Eq BoolT IntT = nothing
wt-binop Eq BoolT BoolT = just BoolT
wt-binop LessEq IntT IntT = just BoolT
wt-binop LessEq IntT BoolT = nothing
wt-binop LessEq BoolT t2 = nothing
wt-binop And IntT t2 = nothing
wt-binop And BoolT IntT = nothing
wt-binop And BoolT BoolT = just BoolT

--- Type System for LIf

infix 4 _‚ä¢_‚¶Ç_
data _‚ä¢_‚¶Ç_ : TypeEnv ‚Üí Exp ‚Üí Type ‚Üí Set where
  wt-num : ‚àÄ {Œì n} ‚Üí Œì ‚ä¢ Num n ‚¶Ç IntT
  wt-bool : ‚àÄ {Œì b} ‚Üí Œì ‚ä¢ Bool b ‚¶Ç BoolT
  wt-read : ‚àÄ {Œì} ‚Üí Œì ‚ä¢ Read ‚¶Ç IntT
  wt-uni : ‚àÄ {Œì op e T‚ÇÅ T}
    ‚Üí Œì ‚ä¢ e ‚¶Ç T‚ÇÅ
    ‚Üí wt-uniop op T‚ÇÅ ‚â° just T
    ‚Üí Œì ‚ä¢ Uni op e ‚¶Ç T
  wt-bin : ‚àÄ {Œì op e‚ÇÅ e‚ÇÇ T‚ÇÅ T‚ÇÇ T}
    ‚Üí Œì ‚ä¢ e‚ÇÅ ‚¶Ç T‚ÇÅ
    ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç T‚ÇÇ
    ‚Üí wt-binop op T‚ÇÅ T‚ÇÇ ‚â° just T
    ‚Üí Œì ‚ä¢ Bin op e‚ÇÅ e‚ÇÇ ‚¶Ç T
  wt-var : ‚àÄ {Œì x T}
    ‚Üí nth Œì x ‚â° just T
    ‚Üí Œì ‚ä¢ Var x ‚¶Ç T
  wt-let : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ T‚ÇÅ T}
    ‚Üí Œì ‚ä¢ e‚ÇÅ ‚¶Ç T‚ÇÅ
    ‚Üí T‚ÇÅ ‚à∑ Œì ‚ä¢ e‚ÇÇ ‚¶Ç T
    ‚Üí Œì ‚ä¢ Let e‚ÇÅ e‚ÇÇ ‚¶Ç T
  wt-if : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ e‚ÇÉ T}
    ‚Üí Œì ‚ä¢ e‚ÇÅ ‚¶Ç BoolT
    ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç T
    ‚Üí Œì ‚ä¢ e‚ÇÉ ‚¶Ç T
    ‚Üí Œì ‚ä¢ If e‚ÇÅ e‚ÇÇ e‚ÇÉ ‚¶Ç T

--- Type System for LMonIf

infix 4 _‚ä¢·µÉ_‚¶Ç_
data _‚ä¢·µÉ_‚¶Ç_ : TypeEnv ‚Üí Atm ‚Üí Type ‚Üí Set where
  wt-num : ‚àÄ {Œì n} ‚Üí Œì ‚ä¢·µÉ Num n ‚¶Ç IntT
  wt-bool : ‚àÄ {Œì b} ‚Üí Œì ‚ä¢·µÉ Bool b ‚¶Ç BoolT
  wt-var : ‚àÄ {Œì x T}
    ‚Üí nth Œì x ‚â° just T
    ‚Üí Œì ‚ä¢·µÉ Var x ‚¶Ç T
  
infix 4 _‚ä¢·µê_‚¶Ç_
data _‚ä¢·µê_‚¶Ç_ : TypeEnv ‚Üí Mon ‚Üí Type ‚Üí Set where
  wt-atom : ‚àÄ {Œì a T}
    ‚Üí Œì ‚ä¢·µÉ a ‚¶Ç T
    ‚Üí Œì ‚ä¢·µê Atom a ‚¶Ç T
  wt-read : ‚àÄ {Œì} ‚Üí Œì ‚ä¢·µê Read ‚¶Ç IntT
  wt-uni : ‚àÄ {Œì op a T‚ÇÅ T}
    ‚Üí Œì ‚ä¢·µÉ a ‚¶Ç T‚ÇÅ
    ‚Üí wt-uniop op T‚ÇÅ ‚â° just T
    ‚Üí Œì ‚ä¢·µê Uni op a ‚¶Ç T
  wt-bin : ‚àÄ {Œì op a‚ÇÅ a‚ÇÇ T‚ÇÅ T‚ÇÇ T}
    ‚Üí Œì ‚ä¢·µÉ a‚ÇÅ ‚¶Ç T‚ÇÅ
    ‚Üí Œì ‚ä¢·µÉ a‚ÇÇ ‚¶Ç T‚ÇÇ
    ‚Üí wt-binop op T‚ÇÅ T‚ÇÇ ‚â° just T
    ‚Üí Œì ‚ä¢·µê Bin op a‚ÇÅ a‚ÇÇ ‚¶Ç T
  wt-let : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ T‚ÇÅ T}
    ‚Üí Œì ‚ä¢·µê e‚ÇÅ ‚¶Ç T‚ÇÅ
    ‚Üí T‚ÇÅ ‚à∑ Œì ‚ä¢·µê e‚ÇÇ ‚¶Ç T
    ‚Üí Œì ‚ä¢·µê Let e‚ÇÅ e‚ÇÇ ‚¶Ç T
  wt-if : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ e‚ÇÉ T}
    ‚Üí Œì ‚ä¢·µê e‚ÇÅ ‚¶Ç BoolT
    ‚Üí Œì ‚ä¢·µê e‚ÇÇ ‚¶Ç T
    ‚Üí Œì ‚ä¢·µê e‚ÇÉ ‚¶Ç T
    ‚Üí Œì ‚ä¢·µê If e‚ÇÅ e‚ÇÇ e‚ÇÉ ‚¶Ç T
    
--- Type System for CIf

infix 4 _‚ä¢·µâ_‚¶Ç_
data _‚ä¢·µâ_‚¶Ç_ : TypeEnv ‚Üí CExp ‚Üí Type ‚Üí Set where
  wt-atom : ‚àÄ {Œì a T}
    ‚Üí Œì ‚ä¢·µÉ a ‚¶Ç T
    ‚Üí Œì ‚ä¢·µâ Atom a ‚¶Ç T
  wt-read : ‚àÄ {Œì} ‚Üí Œì ‚ä¢·µâ Read ‚¶Ç IntT
  wt-uni : ‚àÄ {Œì op a T‚ÇÅ T}
    ‚Üí Œì ‚ä¢·µÉ a ‚¶Ç T‚ÇÅ
    ‚Üí wt-uniop op T‚ÇÅ ‚â° just T
    ‚Üí Œì ‚ä¢·µâ Uni op a ‚¶Ç T
  wt-bin : ‚àÄ {Œì op a‚ÇÅ a‚ÇÇ T‚ÇÅ T‚ÇÇ T}
    ‚Üí Œì ‚ä¢·µÉ a‚ÇÅ ‚¶Ç T‚ÇÅ
    ‚Üí Œì ‚ä¢·µÉ a‚ÇÇ ‚¶Ç T‚ÇÇ
    ‚Üí wt-binop op T‚ÇÅ T‚ÇÇ ‚â° just T
    ‚Üí Œì ‚ä¢·µâ Bin op a‚ÇÅ a‚ÇÇ ‚¶Ç T

infix 4 _‚ä¢·µó_
data _‚ä¢·µó_ : TypeEnv ‚Üí CTail ‚Üí Set where
  wt-return : ‚àÄ {Œì e }
    ‚Üí Œì ‚ä¢·µâ e ‚¶Ç IntT
    ‚Üí Œì ‚ä¢·µó Return e
  wt-assign : ‚àÄ {Œì x e t T‚ÇÅ}
    ‚Üí nth Œì x ‚â° just T‚ÇÅ 
    ‚Üí Œì ‚ä¢·µâ e ‚¶Ç T‚ÇÅ
    ‚Üí (T‚ÇÅ ‚à∑ Œì) ‚ä¢·µó t
    ‚Üí Œì ‚ä¢·µó Assign x e t
  wt-if : ‚àÄ {Œì op a‚ÇÅ a‚ÇÇ thn els T‚ÇÅ T‚ÇÇ}
    ‚Üí Œì ‚ä¢·µÉ a‚ÇÅ ‚¶Ç T‚ÇÅ
    ‚Üí Œì ‚ä¢·µÉ a‚ÇÇ ‚¶Ç T‚ÇÇ
    ‚Üí wt-binop op T‚ÇÅ T‚ÇÇ ‚â° just BoolT
    ‚Üí Œì ‚ä¢·µó If op a‚ÇÅ a‚ÇÇ thn els

wt-blocks : TypeEnv ‚Üí Blocks ‚Üí Set
wt-blocks Œì [] = ‚ä§
wt-blocks Œì (b ‚à∑ bs) = Œì ‚ä¢·µó b √ó wt-blocks Œì bs

-- wt-prog : CProgram ‚Üí Set
-- wt-prog (Œì , bs) = wt-blocks Œì bs


--------------- Shift Preserves Types -------------------

well-typed-shift-atm : ‚àÄ (a : Atm) (Œì‚ÇÅ Œì‚ÇÇ : TypeEnv) (T‚ÇÅ T : Type)
  ‚Üí Œì‚ÇÅ ++ Œì‚ÇÇ ‚ä¢·µÉ a ‚¶Ç T
  ‚Üí Œì‚ÇÅ ++ T‚ÇÅ ‚à∑ Œì‚ÇÇ ‚ä¢·µÉ shift-atm a (length Œì‚ÇÅ) ‚¶Ç T
well-typed-shift-atm (Num n) Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T wt-num = wt-num
well-typed-shift-atm (Bool b) Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T wt-bool = wt-bool
well-typed-shift-atm (Var x) Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T (wt-var nth) 
  rewrite sym (nth-++-shift-var Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ x)
  = wt-var nth

well-typed-shift-mon : ‚àÄ (m : Mon) (Œì‚ÇÅ Œì‚ÇÇ : TypeEnv) (T‚ÇÅ T : Type)
  ‚Üí Œì‚ÇÅ ++ Œì‚ÇÇ ‚ä¢·µê m ‚¶Ç T
  ‚Üí Œì‚ÇÅ ++ T‚ÇÅ ‚à∑ Œì‚ÇÇ ‚ä¢·µê shift-mon m (length Œì‚ÇÅ) ‚¶Ç T
well-typed-shift-mon (Atom a) Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T (wt-atom wt-a) =
  wt-atom (well-typed-shift-atm a Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T wt-a)
well-typed-shift-mon Read Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T wt-read = wt-read
well-typed-shift-mon (Uni op a) Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T (wt-uni wt-a wt-op) =
  wt-uni (well-typed-shift-atm a Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ _ wt-a) wt-op
well-typed-shift-mon (Bin op a‚ÇÅ a‚ÇÇ) Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T (wt-bin wt-a‚ÇÅ wt-a‚ÇÇ wt-op) =
  wt-bin (well-typed-shift-atm a‚ÇÅ Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ _ wt-a‚ÇÅ)
         (well-typed-shift-atm a‚ÇÇ Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ _ wt-a‚ÇÇ)
         wt-op
well-typed-shift-mon (Let m‚ÇÅ m‚ÇÇ) Œì‚ÇÅ Œì‚ÇÇ T' T (wt-let{T‚ÇÅ = T‚ÇÅ} wt-m‚ÇÅ wt-m‚ÇÇ) =
  let wt-m‚ÇÅ : Œì‚ÇÅ ++ T' ‚à∑ Œì‚ÇÇ ‚ä¢·µê shift-mon m‚ÇÅ (length Œì‚ÇÅ) ‚¶Ç T‚ÇÅ
      wt-m‚ÇÅ = well-typed-shift-mon m‚ÇÅ Œì‚ÇÅ Œì‚ÇÇ T' T‚ÇÅ wt-m‚ÇÅ in
  let wt-m‚ÇÇ : T‚ÇÅ ‚à∑ Œì‚ÇÅ ++ T' ‚à∑ Œì‚ÇÇ ‚ä¢·µê shift-mon m‚ÇÇ (suc (length Œì‚ÇÅ)) ‚¶Ç T
      wt-m‚ÇÇ = well-typed-shift-mon m‚ÇÇ (T‚ÇÅ ‚à∑ Œì‚ÇÅ) Œì‚ÇÇ T' T wt-m‚ÇÇ in
  wt-let{T‚ÇÅ = T‚ÇÅ} wt-m‚ÇÅ wt-m‚ÇÇ
well-typed-shift-mon (If m‚ÇÅ m‚ÇÇ m‚ÇÉ) Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T (wt-if wt-m‚ÇÅ wt-m‚ÇÇ wt-m‚ÇÉ) =
  wt-if (well-typed-shift-mon m‚ÇÅ Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ BoolT wt-m‚ÇÅ)
        (well-typed-shift-mon m‚ÇÇ Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T wt-m‚ÇÇ)
        (well-typed-shift-mon m‚ÇÉ Œì‚ÇÅ Œì‚ÇÇ T‚ÇÅ T wt-m‚ÇÉ)

--------------- RCO Preserves Types -------------------

rco-well-typed : ‚àÄ {Œì e T}
  ‚Üí Œì ‚ä¢ e ‚¶Ç T
  ‚Üí Œì ‚ä¢·µê rco e ‚¶Ç T
rco-well-typed wt-num = wt-atom wt-num
rco-well-typed wt-bool = wt-atom wt-bool
rco-well-typed wt-read = wt-read
rco-well-typed (wt-uni wt-e wt-op) =
  wt-let (rco-well-typed wt-e) (wt-uni (wt-var refl) wt-op)
rco-well-typed (wt-bin{Œì}{e‚ÇÇ = e‚ÇÇ}{T‚ÇÅ}{T‚ÇÇ} wt-e‚ÇÅ wt-e‚ÇÇ wt-op) =
  wt-let (rco-well-typed wt-e‚ÇÅ)
  (wt-let (well-typed-shift-mon (rco e‚ÇÇ) [] Œì T‚ÇÅ T‚ÇÇ (rco-well-typed wt-e‚ÇÇ))
  (wt-bin (wt-var refl) (wt-var refl) wt-op))
rco-well-typed (wt-var nth) = wt-atom (wt-var nth)
rco-well-typed (wt-let wt-e‚ÇÅ wt-e‚ÇÇ) =
  wt-let (rco-well-typed wt-e‚ÇÅ) (rco-well-typed wt-e‚ÇÇ)
rco-well-typed (wt-if wt-e‚ÇÅ wt-e‚ÇÇ wt-e‚ÇÉ) =
  wt-if (rco-well-typed wt-e‚ÇÅ) (rco-well-typed wt-e‚ÇÇ)
                               (rco-well-typed wt-e‚ÇÉ)
